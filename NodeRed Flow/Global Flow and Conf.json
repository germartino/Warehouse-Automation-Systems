[
    {
        "id": "b0823cca61e55da7",
        "type": "tab",
        "label": "Sensing Node",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68677633e139a729",
        "type": "tab",
        "label": "Robotic Arm Node",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10e78a89.5b4fd5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspberrypi",
        "port": "1883",
        "tls": "7e5d8e758d6a1640",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "58f112d4b7773af9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.184",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7e5d8e758d6a1640",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "mosq_client.pem",
        "keyname": "mosq_client.key.pem",
        "caname": "mosq_ca.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "17522d42.149913",
        "type": "ui_tab",
        "name": "Video Capture",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "92518872.4d2bc8",
        "type": "ui_group",
        "name": "Video Capture",
        "tab": "17522d42.149913",
        "order": 1,
        "disp": false,
        "width": "7",
        "collapse": false
    },
    {
        "id": "a3844e43954f45e7",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8059ff6e210c8d69",
        "type": "ui_group",
        "name": "Setting",
        "tab": "7d59b044a85dec4a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a394a7850460ce4d",
        "type": "ui_group",
        "name": "Measurement",
        "tab": "7d59b044a85dec4a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "9b81e2344ff56dd1",
        "type": "ui_group",
        "name": "Dashboard",
        "tab": "7d59b044a85dec4a",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7d59b044a85dec4a",
        "type": "ui_tab",
        "name": "Temperature and Humidity Monitoring System",
        "icon": "",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7c26c8d0.c1e658",
        "type": "ui_group",
        "name": "detection",
        "tab": "b123e6c8.d3e948",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": true
    },
    {
        "id": "b123e6c8.d3e948",
        "type": "ui_tab",
        "name": "Slide",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "46995d18ea56d5e9",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.92",
        "port": "3306",
        "db": "warehouse",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "4e8587b31d5e3958",
        "type": "mqtt in",
        "z": "b0823cca61e55da7",
        "name": "Temperature (C)",
        "topic": "esp32/temperature",
        "qos": "2",
        "datatype": "auto",
        "broker": "10e78a89.5b4fd5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "bddceb359443ec2f",
                "0f60524dda1940ac",
                "3150f002f5fc4293",
                "16ef59f2ee8280d9"
            ]
        ]
    },
    {
        "id": "bddceb359443ec2f",
        "type": "debug",
        "z": "b0823cca61e55da7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "e9a04611b96c4334",
        "type": "mqtt in",
        "z": "b0823cca61e55da7",
        "name": "Humidity",
        "topic": "esp32/humidity",
        "qos": "2",
        "datatype": "auto",
        "broker": "10e78a89.5b4fd5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 300,
        "wires": [
            [
                "bddceb359443ec2f",
                "bb0af1f916b2470a",
                "1f48cb9349094209"
            ]
        ]
    },
    {
        "id": "cebaa277d3bc1cec",
        "type": "mqtt in",
        "z": "b0823cca61e55da7",
        "name": "Temperature (F)",
        "topic": "esp32/fahrenheit",
        "qos": "2",
        "datatype": "auto",
        "broker": "10e78a89.5b4fd5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 380,
        "wires": [
            [
                "bddceb359443ec2f",
                "17f5248110c65ca0"
            ]
        ]
    },
    {
        "id": "e08594561f096549",
        "type": "mqtt out",
        "z": "b0823cca61e55da7",
        "name": "",
        "topic": "esp32/limits",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "a3a5740c751e4f50",
        "type": "inject",
        "z": "b0823cca61e55da7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "24",
        "payloadType": "num",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "96cfc271c26da4cd"
            ]
        ]
    },
    {
        "id": "96cfc271c26da4cd",
        "type": "ui_slider",
        "z": "b0823cca61e55da7",
        "name": "",
        "label": "Threshold",
        "tooltip": "",
        "group": "8059ff6e210c8d69",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "-20",
        "max": "50",
        "step": 1,
        "className": "",
        "x": 280,
        "y": 440,
        "wires": [
            [
                "f167b9a7ac5c29b2",
                "e08594561f096549"
            ]
        ]
    },
    {
        "id": "0f60524dda1940ac",
        "type": "ui_text",
        "z": "b0823cca61e55da7",
        "group": "a394a7850460ce4d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Celsius (&deg;C):",
        "format": "{{msg.payload}} ",
        "layout": "row-center",
        "className": "",
        "x": 710,
        "y": 340,
        "wires": []
    },
    {
        "id": "17f5248110c65ca0",
        "type": "ui_text",
        "z": "b0823cca61e55da7",
        "group": "a394a7850460ce4d",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fahrenheit (&deg;F):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "bb0af1f916b2470a",
        "type": "ui_text",
        "z": "b0823cca61e55da7",
        "group": "a394a7850460ce4d",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "f167b9a7ac5c29b2",
        "type": "ui_text",
        "z": "b0823cca61e55da7",
        "group": "8059ff6e210c8d69",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Set Threshold (&deg;C):",
        "format": "{{msg.payload}} ",
        "layout": "row-center",
        "className": "",
        "x": 730,
        "y": 500,
        "wires": []
    },
    {
        "id": "1f48cb9349094209",
        "type": "ui_gauge",
        "z": "b0823cca61e55da7",
        "name": "",
        "group": "9b81e2344ff56dd1",
        "order": 4,
        "width": "12",
        "height": "4",
        "gtype": "donut",
        "title": "Humidity:",
        "label": "",
        "format": "{{value}} %",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "50",
        "seg2": "70",
        "className": "",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "16ef59f2ee8280d9",
        "type": "ui_gauge",
        "z": "b0823cca61e55da7",
        "name": "",
        "group": "9b81e2344ff56dd1",
        "order": 4,
        "width": "12",
        "height": "4",
        "gtype": "gage",
        "title": "Temperature:",
        "label": "",
        "format": "{{value}} °C",
        "min": "-20",
        "max": "50",
        "colors": [
            "#008fb3",
            "#e2e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "30",
        "className": "",
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "3150f002f5fc4293",
        "type": "ui_chart",
        "z": "b0823cca61e55da7",
        "name": "",
        "group": "9b81e2344ff56dd1",
        "order": 5,
        "width": "12",
        "height": "6",
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "50",
        "removeOlder": "30",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2529f77d28f1f1db",
        "type": "http request",
        "z": "68677633e139a729",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.1.4/capture",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "48695235a838ea08",
                "ea1ab6373d4b694d"
            ]
        ]
    },
    {
        "id": "c7fe23886e5d2914",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "90a08ca8152fe041",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "classes",
        "statusType": "auto",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "3197ec3b68de9bd7",
        "type": "mqtt in",
        "z": "68677633e139a729",
        "name": "Camera",
        "topic": "camera/capture",
        "qos": "0",
        "datatype": "auto",
        "broker": "10e78a89.5b4fd5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "2529f77d28f1f1db"
            ]
        ]
    },
    {
        "id": "11e5e68a83b169ba",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "classes",
        "statusType": "auto",
        "x": 870,
        "y": 100,
        "wires": []
    },
    {
        "id": "577f8b175d1657d0",
        "type": "link in",
        "z": "68677633e139a729",
        "name": "",
        "links": [
            "7b2731d1287f1231"
        ],
        "x": 145,
        "y": 560,
        "wires": [
            [
                "05a8dd658f043578",
                "93d4930951416e2e",
                "e5aa90415f781721",
                "f3504b3acfddc3bd",
                "b32e3bb1a040cd16"
            ]
        ]
    },
    {
        "id": "7b2731d1287f1231",
        "type": "link out",
        "z": "68677633e139a729",
        "name": "",
        "mode": "link",
        "links": [
            "577f8b175d1657d0"
        ],
        "x": 785,
        "y": 380,
        "wires": []
    },
    {
        "id": "48695235a838ea08",
        "type": "image",
        "z": "68677633e139a729",
        "name": "Original Image",
        "width": "160",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 680,
        "y": 20,
        "wires": []
    },
    {
        "id": "735f61e0bdee545a",
        "type": "image",
        "z": "68677633e139a729",
        "name": "Annotaded Image",
        "width": "160",
        "data": "annotatedInput",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 910,
        "y": 300,
        "wires": []
    },
    {
        "id": "3e31350d3a935056",
        "type": "ui_switch",
        "z": "68677633e139a729",
        "name": "",
        "label": "Activate Robotic Arm",
        "tooltip": "",
        "group": "92518872.4d2bc8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1160,
        "y": 100,
        "wires": [
            [
                "e11b6ba97d9a4c58"
            ]
        ]
    },
    {
        "id": "5edd58254a155407",
        "type": "ui_slider",
        "z": "68677633e139a729",
        "name": "",
        "label": "base",
        "tooltip": "",
        "group": "92518872.4d2bc8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 1110,
        "y": 160,
        "wires": [
            [
                "f29ddfdd5dfefdfa"
            ]
        ]
    },
    {
        "id": "3b459ad2988fd89e",
        "type": "ui_slider",
        "z": "68677633e139a729",
        "name": "",
        "label": "shoulder",
        "tooltip": "",
        "group": "92518872.4d2bc8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 1120,
        "y": 220,
        "wires": [
            [
                "93587bb90cbefed7"
            ]
        ]
    },
    {
        "id": "3feaf692b2c2d047",
        "type": "ui_slider",
        "z": "68677633e139a729",
        "name": "",
        "label": "elbow",
        "tooltip": "",
        "group": "92518872.4d2bc8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "7af46b606e209415"
            ]
        ]
    },
    {
        "id": "146a8a1ffb41bf85",
        "type": "ui_slider",
        "z": "68677633e139a729",
        "name": "",
        "label": "gripper",
        "tooltip": "",
        "group": "92518872.4d2bc8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 1120,
        "y": 340,
        "wires": [
            [
                "94ec3ad27431b0fe"
            ]
        ]
    },
    {
        "id": "e11b6ba97d9a4c58",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "",
        "topic": "robotics/controller",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 1370,
        "y": 100,
        "wires": []
    },
    {
        "id": "f29ddfdd5dfefdfa",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "",
        "topic": "robotics/baseArm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 1350,
        "y": 160,
        "wires": []
    },
    {
        "id": "93587bb90cbefed7",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "",
        "topic": "robotics/shoulderArm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 1340,
        "y": 220,
        "wires": []
    },
    {
        "id": "7af46b606e209415",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "",
        "topic": "robotics/elbowArm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 1350,
        "y": 280,
        "wires": []
    },
    {
        "id": "94ec3ad27431b0fe",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "",
        "topic": "robotics/gripperArm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 1340,
        "y": 340,
        "wires": []
    },
    {
        "id": "485adddf8d1e3a3f",
        "type": "mqtt in",
        "z": "68677633e139a729",
        "name": "Radar",
        "topic": "radar/conveyor",
        "qos": "2",
        "datatype": "auto",
        "broker": "10e78a89.5b4fd5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 940,
        "wires": [
            [
                "dbc078532139b8ac",
                "a07e87f2e22f36fe",
                "7760542fccb45b0f",
                "79927c8d862efa59",
                "4e36adfb65dc827c",
                "85cab9f0b36f8283"
            ]
        ]
    },
    {
        "id": "dbc078532139b8ac",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "Conveyor",
        "topic": "radar/conveyor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 500,
        "y": 840,
        "wires": []
    },
    {
        "id": "a07e87f2e22f36fe",
        "type": "ui_led",
        "z": "68677633e139a729",
        "order": 6,
        "group": "92518872.4d2bc8",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "First Conveyor",
        "x": 540,
        "y": 900,
        "wires": []
    },
    {
        "id": "7760542fccb45b0f",
        "type": "ui_led",
        "z": "68677633e139a729",
        "order": 7,
        "group": "92518872.4d2bc8",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Second Conveyor",
        "x": 550,
        "y": 940,
        "wires": []
    },
    {
        "id": "79927c8d862efa59",
        "type": "ui_led",
        "z": "68677633e139a729",
        "order": 8,
        "group": "92518872.4d2bc8",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Thirth Conveyor",
        "x": 540,
        "y": 980,
        "wires": []
    },
    {
        "id": "4e36adfb65dc827c",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "classes",
        "statusType": "auto",
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "85cab9f0b36f8283",
        "type": "delay",
        "z": "68677633e139a729",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1060,
        "wires": [
            [
                "e45cfa86e6324368"
            ]
        ]
    },
    {
        "id": "e45cfa86e6324368",
        "type": "mqtt out",
        "z": "68677633e139a729",
        "name": "PickAndPlace",
        "topic": "robotics/value",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "10e78a89.5b4fd5",
        "x": 720,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e5aa90415f781721",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 530,
        "y": 620,
        "wires": []
    },
    {
        "id": "93d4930951416e2e",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "classes",
        "targetType": "msg",
        "x": 530,
        "y": 590,
        "wires": []
    },
    {
        "id": "646320cb218acb9a",
        "type": "base64",
        "z": "68677633e139a729",
        "name": "",
        "action": "str",
        "property": "image",
        "x": 960,
        "y": 560,
        "wires": [
            [
                "aeb7f4dcac4837d6"
            ]
        ]
    },
    {
        "id": "8d415aa87e249ab3",
        "type": "comment",
        "z": "68677633e139a729",
        "name": "OBJECT RECOGNITION",
        "info": "\n    ",
        "x": 250,
        "y": 520,
        "wires": []
    },
    {
        "id": "f3504b3acfddc3bd",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "coco",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 650,
        "wires": []
    },
    {
        "id": "6141b7b5ea502a76",
        "type": "image",
        "z": "68677633e139a729",
        "name": "",
        "width": "400",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": false,
        "outputs": 0,
        "x": 540,
        "y": 680,
        "wires": []
    },
    {
        "id": "05a8dd658f043578",
        "type": "change",
        "z": "68677633e139a729",
        "name": "pay to detect",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "detect",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 560,
        "wires": [
            [
                "70f4428f32955578"
            ]
        ]
    },
    {
        "id": "70f4428f32955578",
        "type": "function",
        "z": "68677633e139a729",
        "name": "Map Objects Boxes get.Picture",
        "func": "//========== retrieves and transmits the image ==========\n//var pictureBuffer = flow.get('pictureBuffer')|| [];\n//msg.pictureBuffer = pictureBuffer;  // send the picture\n\n//========== Detect Empty Objects ==========\nif(empty(msg.classes)){\nmsg.payload = \"no object detected\"  //prepare for the google translate\nmsg.class=\"no object detected\"      //prepare for display in Template Dashboard\nmsg.detect=[]                       //\nreturn msg\n} //no found object \nelse {\n// prepare the color and the thickness of the line in fct of the image size\nmsg.boxcolor = \"yellow\";\nmsg.textcolor = \"yellow\";\n \nif (msg.shape[1] < 300)                             {msg.textfontsize =\"10px\";msg.boxstroke =1;msg.textstroke = \"3px\";}\nelse if (msg.shape[1] >= 300 && msg.shape[1] < 500) {msg.textfontsize =\"15px\";msg.boxstroke =2;msg.textstroke = \"3px\";}\nelse if (msg.shape[1] >= 500 && msg.shape[1] < 900) {msg.textfontsize =\"20px\";msg.boxstroke =2;msg.textstroke = \"5px\";}\nelse if (msg.shape[1] >= 900 && msg.shape[1] < 2000){msg.textfontsize =\"50px\";msg.boxstroke =5;msg.textstroke = \"10px\";}\nelse if (msg.shape[1] >= 2000)                      {msg.textfontsize =\"80px\";msg.boxstroke =10;msg.textstroke = \"20px\";}\n\n//msg.textfontsize =(msg.shape[1] > 600) ? \"70px\" : \"10px\";\n//msg.boxstroke = (msg.shape[1] > 600) ? 5 : 2;\n//msg.textstroke = (msg.shape[1] > 600) ? \"10px\" : \"2px\";\n\n//========== indicates the type of objects and the quantity ==========\n// Get the array of names\nvar names = Object.keys(msg.classes);\nvar firstCount;\n\n// For each name, map it to \"n name\"\nvar parts = names.map((n,i) => {\n    var count = msg.classes[n];\n    if (i === 0) {\n        //Remember the first count to get the \"is/are\" right later\n        firstCount = count;\n    }\n    // Return \"n name\" and get the pluralisation right\n    return count+\" \"+n+(count>1?\"s\":\"\")\n})\n// If there is more than one name, pop off the last one for later\nvar lastName;\nif (parts.length > 1) {\n    lastName = parts.pop();\n}\n// Build up the response getting \"is/are\" right for the first count and joining\n// the array of names with a comma\nmsg.payload = \"There \"+(firstCount === 1 ? \"is\":\"are\")+\" \"+parts.join(\", \")\n// If there was a last name, add that on the end with an 'and', not a comma\nif (lastName) {\n    msg.payload += \" and \"+lastName;\n}\nreturn msg;\n}//fin de si detecte\n\n//========== EMPTY FONCTION ==========\n/*\nHere's a simpler(short) solution to check for empty variables. \nThis function checks if a variable is empty. \nThe variable provided may contain mixed values (null, undefined, array, object, string, integer, function).\n*/\nfunction empty(mixed_var) {\n if (!mixed_var || mixed_var == '0') {  return true; }\n if (typeof mixed_var == 'object') {  \n    for (var k in mixed_var) {   return false;  }\n    return true; \n }\nreturn false;\n}//EMPTY FONCTION END\n",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 560,
        "wires": [
            [
                "646320cb218acb9a"
            ]
        ]
    },
    {
        "id": "aeb7f4dcac4837d6",
        "type": "ui_template",
        "z": "68677633e139a729",
        "group": "7c26c8d0.c1e658",
        "name": "D3 templatev3 TextStroke",
        "order": 1,
        "width": "7",
        "height": "5",
        "format": "<head>\n    <style>\n        :root {\n        --boxcolor: {{msg.boxcolor}};\n        --boxstroke: {{msg.boxstroke}};\n        --textcolor: {{msg.textcolor}};\n        --textfontsize: {{msg.textfontsize}};\n        --textstroke: {{msg.textstroke}};\n        }\n        .imag {\n            width: 100%;\n            height: 100%;\n        }    \n        #svgimage text {\n            font-family: Arial;\n            font-size: var(--textfontsize, 18px);\n            fill       : var(--textcolor, yellow);\n            paint-order: stroke;\n            stroke: black;/*#ffffff;*//*yellow;*/\n            stroke-width:  var(--textstroke, 3px);/*3px;*/\n            font-weight: 600;\n        }\n        rect {\n            fill: blue;\n            fill-opacity: 0;\n            stroke: var(--boxcolor, yellow);\n            stroke-width: var(--boxstroke, 1);\n        }\n        #svgimage {\n            /*background-color: #cccccc;  Used if the image is unavailable */\n            background-repeat: no-repeat;\n            background-size: cover;\n        }\n    </style>\n</head>\n<body>\n    <svg preserveAspectRatio=\"xMidYMid meet\" id=\"svgimage\"  style=\"width:100%\" viewBox=\"0 0 {{msg.shape[1]}} {{msg.shape[0]}}\">\n        <image  class=\"imag\"  href=\"data:image/jpg;base64,{{msg.image}}\"/>\n    </svg>\n    <!-- \n    <svg preserveAspectRatio=\"xMidYMid meet\" id=\"svgimage\"  style=\"width:100%\" viewBox=\"0 0 {{msg.shape[1]}} {{msg.shape[0]}}\">\n        <image  class=\"imag\"  href=\"data:image/jpg;base64,{{msg.pictureBuffer}}\"/>\n    </svg>    \n    \n    -->\n    <div>{{msg.payload}}</div>\n    <script>\n        (function (scope) {\n            scope.$watch('msg', function (msg) {\n                if (msg && msg.detect) {\n                    var svg = d3.select(\"#svgimage\");\n\n                    var box = svg.selectAll(\"rect\").data(msg.detect)\n                        .attr(\"x\", function (d) { return d.bbox[0]; })\n                        .attr(\"y\", function (d) { return d.bbox[1]; })\n                        .attr(\"width\", function (d) { return d.bbox[2]; })\n                        .attr(\"height\", function (d) { return d.bbox[3]; });\n                    box.enter()\n                        .append(\"rect\")\n                        .attr(\"x\", function (d) { return d.bbox[0]; })\n                        .attr(\"y\", function (d) { return d.bbox[1]; })\n                        .attr(\"width\", function (d) { return d.bbox[2]; })\n                        .attr(\"height\", function (d) { return d.bbox[3]; });\n                    box.exit().remove();\n                    \n                    var text = svg.selectAll(\"text\").data(msg.detect)\n                        .text(function (d) { return d.class; })\n                        .attr(\"x\", function (d) { return d.bbox[0]; })\n                        .attr(\"y\", function (d) { return 10 + d.bbox[1]; });\n                    text.enter()\n                        .append(\"text\")\n                        .text(function (d) { return d.class; })\n                        .attr(\"x\", function (d) { return d.bbox[0]; })\n                        .attr(\"y\", function (d) { return 10 + d.bbox[1]; });\n                    text.exit().remove();\n                }\n            });\n        })(scope);\n    </script>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1150,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "b32e3bb1a040cd16",
        "type": "change",
        "z": "68677633e139a729",
        "name": "image to pay",
        "rules": [
            {
                "t": "move",
                "p": "image",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 680,
        "wires": [
            [
                "6141b7b5ea502a76"
            ]
        ]
    },
    {
        "id": "d6edb3d747848e98",
        "type": "comment",
        "z": "68677633e139a729",
        "name": "SENSING NODE",
        "info": "\n    ",
        "x": 220,
        "y": 880,
        "wires": []
    },
    {
        "id": "826925409413e699",
        "type": "comment",
        "z": "68677633e139a729",
        "name": "OBJECT RECOGNITION",
        "info": "\n    ",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "8a278284224e6710",
        "type": "comment",
        "z": "68677633e139a729",
        "name": "ROBOTIC ARM CONTROL",
        "info": "\n    ",
        "x": 1250,
        "y": 60,
        "wires": []
    },
    {
        "id": "5f5450043f08424d",
        "type": "debug",
        "z": "68677633e139a729",
        "name": "See output on debug sidebar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "ea1ab6373d4b694d",
        "type": "jimp-image",
        "z": "68677633e139a729",
        "name": "Load image",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "120",
        "parameter1Type": "num",
        "parameter2": "-1",
        "parameter2Type": "num",
        "parameter3": "",
        "parameter3Type": "none",
        "parameter4": "",
        "parameter4Type": "str",
        "parameter5": "",
        "parameter5Type": "none",
        "parameter6": "",
        "parameter6Type": "none",
        "parameter7": "",
        "parameter7Type": "",
        "parameter8": "",
        "parameter8Type": "",
        "sendProperty": "payload",
        "parameterCount": 3,
        "jimpFunction": "resize",
        "selectedJimpFunction": {
            "name": "resize",
            "fn": "resize",
            "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
            "parameters": [
                {
                    "name": "w",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "h",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "mode",
                    "type": "resizeMode",
                    "required": false,
                    "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                }
            ]
        },
        "x": 470,
        "y": 220,
        "wires": [
            [
                "36e1a79c3706deb9"
            ]
        ],
        "icon": "font-awesome/fa-image"
    },
    {
        "id": "89214ec656fa04e8",
        "type": "jimp-image",
        "z": "68677633e139a729",
        "name": "clean up image",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "100",
        "parameter1Type": "num",
        "parameter2": "RESIZE_BICUBIC",
        "parameter2Type": "Jimp",
        "parameter3": "",
        "parameter3Type": "",
        "parameter4": "",
        "parameter4Type": "",
        "parameter5": "",
        "parameter5Type": "",
        "parameter6": "",
        "parameter6Type": "",
        "parameter7": "",
        "parameter7Type": "",
        "parameter8": "",
        "parameter8Type": "",
        "sendProperty": "payload",
        "parameterCount": 1,
        "jimpFunction": "quality",
        "selectedJimpFunction": {
            "name": "quality",
            "fn": "quality",
            "description": "Set the quality of the image. Useful for reducing size of image before calling the write function.",
            "parameters": [
                {
                    "name": "quality",
                    "type": "num",
                    "required": true,
                    "hint": "Quality value 1 ~ 100"
                }
            ]
        },
        "x": 570,
        "y": 420,
        "wires": [
            [
                "d36a8cf6b57d16fa"
            ]
        ],
        "icon": "font-awesome/fa-image"
    },
    {
        "id": "36e1a79c3706deb9",
        "type": "image viewer",
        "z": "68677633e139a729",
        "name": "",
        "width": "120",
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "89214ec656fa04e8"
            ]
        ]
    },
    {
        "id": "d36a8cf6b57d16fa",
        "type": "image viewer",
        "z": "68677633e139a729",
        "name": "",
        "width": "200",
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 730,
        "y": 420,
        "wires": [
            [
                "8040564fb039930b"
            ]
        ]
    },
    {
        "id": "8040564fb039930b",
        "type": "Barcode Decoder",
        "z": "68677633e139a729",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "tryharder": "true",
        "tryharderType": "bool",
        "QR_CODE": true,
        "DATA_MATRIX": true,
        "PDF_417": true,
        "EAN_8": false,
        "EAN_13": false,
        "CODE_39": false,
        "CODE_128": false,
        "ITF": false,
        "RSS_14": false,
        "x": 910,
        "y": 420,
        "wires": [
            [
                "5f5450043f08424d"
            ]
        ]
    }
]